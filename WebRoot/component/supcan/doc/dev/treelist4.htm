<HTML>
<head>
<meta http-equiv="content-type" content="text/html; charset=gb2312">
<link rel="stylesheet" href="../temp1.css" type="text/css">
</head>
<body bgcolor=#ffffff vlink=#0000ff>
<div id="Tag508"/><br><br><br>
　　<font style='font-size:15pt'>13.自定义菜单</font><hr color=#2266ee size=1>
　　“自定义菜单”是指向鼠标右键弹出菜单增加菜单项，通过"MenuBeforePopup"事件、调用AddMenu( )函数、以及"MenuClicked"事件，实现了菜单的自定义，整个过程是动态的。<br>
　　详细的过程是：当鼠标右键菜单即将要弹出时，Treelist会触发页面的OnEvent(id, "MenuBeforePopup", ...)事件，在这个事件的js中，你可以通过调用AddMenu( )函数向Treelist动态增加菜单项；如果用户选中了你定义的菜单项，Treelist会触发OnEvent(id, "MenuClicked", ...)事件，从而达到了自定义菜单功能的目的.<br>
　　在demo中有详细的演示页，相信您一看就明白。<br>
　　AddMenu( 参数 )函数中的参数可以是XML串、非XML的文字串，或URL，其规则举例如下：<br>
<pre class='xml'>
&lt;items&gt;
&lt;item id="3103" text="热销" icon="buttons.zip#303.ico"&gt;
&lt;item id="3104" text="滞销产品" icon="buttons.zip#304.ico"&gt;
 &lt;item id="31041" text="库存1" icon="buttons.zip#304.ico" detail="浮动的详细说明，可选"/&gt;
 &lt;item id="31042" text="库存2" enable="false" detail="浮动的详细说明，可选"/&gt;
&lt;/item&gt;
&lt;/items&gt;</pre>
　　如果采用非XML的普通串，其举例如下：<br>
<pre class='cpp'>
//多个菜单项之间以回车符分隔
var s = "id=4001; text=男帽; icon=buttons.zip#301.ico; detail=夏季时装\r\n";
s += "id=4002; text=时髦头巾; icon=buttons.zip#302.ico; detail=优惠直销"</pre>
　　规则1：如果是XML串，元素名须为<font color=red>item</font>;<br>
　　规则2：如果是XML串，item允许有下级item，表示菜单项的子菜单：<br>
　　规则3：属性有<font color=red>id</font>、<font color=red>text</font>、<font color=red>icon</font>、<font color=red>enable</font>、<font color=red>checked</font>、<font color=red>detail</font>，其中 id 必须 <b><font color=red> >=3000 </font></b>.<br>


<div id="Tag509"/><br><br><br>
　　<font style='font-size:15pt'>14.事件</font><hr color=#2266ee size=1>
　　Supcan Treelist的OnEvent( id, Event, p1, p2, p3, p4 )事件含义及参数分别如下：<br>
<table width=100% cellpadding=4 cellspacing=0 border=1  borderColorLight=#999999 borderColorDark=#999999 align="center">
<tr bgcolor=#eaeaea><td>Event</td><td>含义</td><td>p1</td><td>p2</td><td>p3</td><td>p4</td></tr>
<tr><td>SelChanged</td><td>当前行或单元格已变化(被切换).<br><font color='#006666'>备注：当p2参数为空串时, 表示当前行已变化: 否则表示当前单元格已变化, 并且进入编辑状态</font></td><td>行号</td><td>列名</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Clicked<br>注:情形1</td><td>鼠标点到某单元格</td><td>行号</td><td>列名</td><td>如果当前列为超链接, 则为本单元格的内容</td><td>见备注1</td></tr>
<tr><td>Clicked<br>注:情形2</td><td>鼠标点到某列表头</td><td>-1</td><td>列名</td><td>如果是isCheckboxOnly 列, 则为 1 或 0</td><td>&nbsp;</td></tr>
<tr><td>DblClicked</td><td>鼠标双击某单元格<br>注：可执行全局函数CalcelEvent( )阻止继续执行</td><td>行号</td><td>列名</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BeforeEdit</td><td>某单元进入编辑(输入)前<br>注：可执行全局函数CalcelEvent( )阻止继续执行</td><td>行号</td><td>列名</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>EditChanged</td><td>某单元被修改</td><td>行号</td><td>列名</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>DropdownSelChanged</td><td>某单元的下拉 Treelist 的选中行已变.<br><font color='#006666'>备注: 该事件和 EditChanged 不太一样, 因为下拉以后, 仍可以通过 Esc 键反悔、 不再触发 EditChanged 事件. 当然，如果您在 &lt;properties&gt; 中设定了 AutoUpdate="true", 那就无法用 Esc 反悔了.</font></td><td>行号</td><td>列名</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>BeforeDropdown</td><td>某单元的下拉 List 或下拉 Treelist 正准备下拉.<br>注：可执行全局函数CalcelEvent( )阻止继续执行, 但仅对下拉Treelist有效, 对下拉List无效.</td><td>行号</td><td>列名</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>EditKeydown</td><td>在编辑状态时输入框的键盘动作<br>请见备注2</td><td>行号</td><td>列名</td><td>键的ASCII码，例如回车是13、空格是32</td><td>见备注3</td></tr>
<tr><td>EditChar</td><td>在编辑状态时输入框的键盘字符<br>请见备注2</td><td>行号</td><td>列名</td><td>字符的ASCII码</td><td>&nbsp;</td></tr>
<tr><td>Keydown</td><td>在非编辑状态时的键盘动作<br>注：可执行全局函数CalcelEvent( )阻止继续执行</td><td>行号，如果有多行则以逗号分隔</td><td>&nbsp;</td><td>键的ASCII码，例如回车是13、空格是32</td><td>见备注3</td></tr>
<tr><td>LooseFocus</td><td>某单元刚失去焦点</td><td>行号</td><td>列名</td><td>导致失去焦点的动作键位值：<br>9 - Tab<br>13 - 回车<br>37 - left<br>38 - up<br>39 - right;<br>40 - down<br> 空串 - 鼠标或其它原因导致</td><td>&nbsp;</td></tr>
<tr><td>rowsInserted</td><td>有行插入</td><td>新行的行号</td><td>数量</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>rowsDeleted</td><td>有行被删除<br>注：未定义key的Treelist不会触发该事件</td><td>被删行的Key, 若有多行则以\t分隔</td><td>被删除行的原始内容(XML格式)</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>LazyLoad</td><td>LazyLoad="true"的单列多层树的树杈被首次点击</td><td>行号</td><td>id号 (当treeformat为byId、byPid时)</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MenuBeforePopup</td><td>鼠标右键菜单即将弹出</td><td>行号，<br>可能为-1</td><td>列名, <br>有可能为空</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>MenuClicked</td><td>鼠标右键菜单自定义功能被选中</td><td>菜单项id</td><td>行号</td><td>列名</td><td>&nbsp;</td></tr>
<tr><td>BeforeDragRow</td><td>行即将被拖拽<br>注：可执行全局函数CalcelEvent( )阻止继续执行</td><td>被拖动的行，多个行则以逗号分隔</td><td>目的行</td><td>1/0 - 拖动到目的行的上方/下方</td><td>见备注4</td></tr>
<tr><td>RequestAllPages</td><td>需要加载全部数据，以打印或转换输出<br><font color='#006666'>注：用于分页显示时.</font></td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>Sort</td><td>已重新排序 (触发了排序操作)</td><td>如果&lt;Properties&gt;中定义了IsRemoteSort, <br>则为“1”，否则是空</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>HotKey</td><td>触发了快捷键</td><td>快捷键</td><td>当前行的行号, 如果正在输入的话</td><td>当前列的列名, 如果正在输入的话</td><td>&nbsp;</td></tr>
<tr><td>Load</td><td>数据已经通过Load( )函数加载</td><td>URL, 空串表示加载的是XML/JSON串</td><td>0-同步加载<br>1-异步加载</td><td>&nbsp;</td><td>&nbsp;</td></tr>
<tr><td>UserEvent</td><td>全局函数 PostMessage 发出的自定义事件</td><td>自定义</td><td>自定义</td><td>自定义</td><td>自定义</td></tr>
</table>
　　事件的js用法可参见Demo。<br>
<b>备注1</b>：如果当前列为 Button型 或 editWithButton型,  鼠标点在 button上则为"button"；如果列中有多个button，那么分别为"button1"、"button2"...类推.<br>
<b>备注2</b>：EditKeydown和EditChar均为在输入框中的键盘事件，EditKeydown能捕获几乎所有键盘动作，包括非字符的回车、Tab等；而EditChar则以输入的字符为主，包括中文.<br>您可以执行全局函数 CancelEvent( ) 去阻止继续执行，就如事件没有发生过那样，但不同的ASCII码，您需要在这二个事件中挑选一个执行CancelEvent( )，具体请在演示页“12.事件”中去测试;<br>
<b>备注3</b>：1-Ctrl键也按下了； 2-Shift键也按下了； 3-二者一起按下了.<br>
<b>备注4</b>：格式为handle=[?];asChild=true，例如串"handle=82922093;asChild=true"，其中handle的含义为源Treelist的句柄(可通过GetHandle函数获得)，如果是自我拖拽，则不出现该项；asChild=true表示作为子孙拖入，如果非子孙、或者当前非树，则不出现该项.<br>

<div id="Tag50a"/><br><br><br>
　　<font style='font-size:15pt'>15.XML提交格式规范</font><hr color=#2266ee size=1>
　　通过调用函数GetChangedXML( )，能取得输入内容的XML包，使得应用服务器能作相应处理，函数中参数level为提交级别，分如下4种：<br>
　　级别0：生成当前全部、最新内容(不包括修改前的原始内容);<br>
　　级别1：仅生成被修改过的单元格的内容(包括原始内容);<br>
　　级别2：在级别1的基础上，增加被修改过单元的整行内容;<br>
　　级别3，内容包含所有行、所有列、修改前后的内容.<br>
<br>
　　级别0最常用，并且XML规范最简单，如下所示：<br>
<pre class='xml'>
&lt;?xml version="1.0" encoding="UTF-8"?"&gt;
&lt;!-- id在XML描述文件中定义 --&gt;
&lt;table id="?" level="0" 自定义属性="?" &gt;
　&lt;row&gt;
　　　&lt;!-- 列名处为真实的列名 --&gt;
　　　&lt;列名&gt;Text&lt;/列名&gt;
　　　...
　&lt;/row&gt;
　&lt;row ...&gt;
　　　...
　&lt;/row&gt;
　...
&lt;/table&gt;</pre>
<br>
　　级别1、2、3的内容规定如下：<br>
<pre class='xml'>
&lt;?xml version="1.0" encoding="UTF-8"?"&gt;
&lt;!-- id、key在XML描述文件中定义 --&gt;
&lt;table id="?" key="?" level="?" 自定义属性="?" &gt;

　&lt;!-- 区域1: 被修改的行 --&gt;
　&lt;modifiedRow&gt;
　　&lt;!-- key为该行key列的原始值(被修改前), rowNumber为行号 --&gt;
　　&lt;row key="?" rowNumber="?"&gt;
　　　&lt;!-- 列名处为真实的列名, origin为原始值(被修改前)，isModified仅用于级别2和级别3, Text处为修改后的值 --&gt;
　　　&lt;列名 origin="?" isModified="false"&gt;Text&lt;/列名&gt;
　　　...
　　&lt;/row&gt;
　　...
　&lt;/modifiedRow&gt;
 
　&lt;!-- 区域2: 新增行 --&gt;
　&lt;newRow&gt;
　　&lt;!-- key为该行key列处输入的值, rowNumber为行号 --&gt;
　　&lt;row key="?" rowNumber="?"&gt;
　　　&lt;!-- 列名处为真实的列名, Text处为输入的内容 --&gt;
　　　&lt;列名&gt;Text&lt;/列名&gt;
　　　...
　　&lt;/row&gt;
　　...
　&lt;/newRow&gt;
 
　&lt;!-- 区域3: 被删除的行 --&gt;
　&lt;deletedRow&gt;
　　&lt;!-- key为该行key列的原始值(被修改前) --&gt;
　　&lt;row key="?"&gt;&lt;/row&gt;
　　...
　&lt;/deletedRow&gt;
 
　&lt;!-- 区域4: 未修改过的行(仅用于级别3 时) --&gt;
　&lt;notModifiedRow&gt;
　　&lt;!-- 略，和区域1相比只是少了"Origin"属性 --&gt;
　&lt;/notModifiedRow&gt;

&lt;/table&gt;</pre>
<img src='glass.jpg'><font color="552222">警告：应用服务器端开发的程序不应过于依赖级别1/2/3中的origin的内容(被修改前)，因为需要考虑并发.</font><br>

<br><br><br><br>
<script type='text/javascript' src='nstd.js'></script>
</body></html>